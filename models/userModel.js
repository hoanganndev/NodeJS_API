const mongoose = require('mongoose');
const Schema = mongoose.Schema;
const bcrypt = require('bcryptjs');
const UserSchema = new Schema({
  firstName: {
    type: String
  },
  lastName: {
    type: String
  },
  email: {
    type: String,
    required: true,
    unique: true,
    lowercase: true
  },
  password: {
    type: String,
    required: true
  },
  decks: [{
    type: Schema.Types.ObjectId,
    ref: 'Deck'
  }],
});
// tr∆∞·ªõc khi l∆∞u v√†o ƒë√¢y ƒë·ªÉ chuy·ªÉn ƒë·ªëi m·∫≠t kh·∫©u ƒë·ªÉ b·∫£o m·∫≠t
UserSchema.pre('save',async function (next){
  try {
    // Generate a salt (t·∫°o ra 1 ƒëo·∫°n ramdom k·∫øt h·ª£p m·ªõi m·∫≠t kh·∫©u )
    console.log('üî• password',this.password);
    const salt = await bcrypt.genSalt(10);
    console.log('üî•salt',salt)
    // Generate a password hash(salt+hash)
    const passwordHashed=await bcrypt.hash(this.password,salt);
    console.log('üî•passwordHashed',passwordHashed);
    // Re-assign password hashed
    this.password=passwordHashed;
    next();
  } catch (error) {
    next(error);
  }
})
//khi ng∆∞·ªùi d√πng g·ª≠i m·∫≠t kh·∫©u l√™n th√¨ v√†o ƒë√¢y so s√°nh v·ªõi m·∫≠t kh·∫©u ·ªü database
//=> h√†m n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ·ªü  passport.js
UserSchema.methods.isValidPassword = async function(newPassword) {
  try {
    /*
    newPassword: password c·ªßa ng∆∞·ªùi d√πng nh·∫≠p
    this.password: password trong csdl
    tr·∫£ v·ªÅ true or false
    */
    return await  bcrypt.compare(newPassword,this.password);
  } catch (error) {
    // N·∫øu c√≥ l·ªói th√¨ b·∫Øn ra lu√¥n
    throw new Error(error)
  }
}
const User = mongoose.model('User', UserSchema);
module.exports = User;